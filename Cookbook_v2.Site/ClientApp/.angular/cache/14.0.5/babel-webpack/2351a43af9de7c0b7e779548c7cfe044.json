{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Ruprecht Kraus/source/repos/Cookbook/Cookbook/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport let ImageService = /*#__PURE__*/(() => {\n  class ImageService {\n    constructor() {}\n\n    readImageAsBase64(file) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        _this.VerifyFileTypeAndSize(file);\n\n        const promise = yield new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(file);\n\n          reader.onload = rs => {\n            resolve(reader.result);\n          };\n\n          reader.onerror = () => reject;\n        });\n        const image = new Image();\n        image.src = yield promise;\n        yield image.decode();\n\n        _this.VerifyImageDimensions(image);\n\n        return image.src;\n      })();\n    }\n\n    VerifyFileTypeAndSize(file) {\n      const allowedFileTypes = [\"image/jpeg\", \"image/png\"];\n      const maxSize = 5000000;\n\n      if (!allowedFileTypes.includes(file.type)) {\n        throw \"Допустимы только изображения: JPG, PNG\";\n      }\n\n      if (file.size > maxSize) {\n        throw \"Максимальный допустимый вес файла \" + maxSize / 1000 + \"Мб\";\n      }\n    }\n\n    VerifyImageDimensions(image) {\n      const maxHeight = 2500;\n      const maxWidth = 2500;\n\n      if (image.width > maxWidth || image.heigh > maxHeight) {\n        throw \"Максимальный допустимый размер изображения \" + maxWidth + \"x\" + maxHeight + \" пикселей\";\n      }\n    }\n\n  }\n\n  ImageService.ɵfac = function ImageService_Factory(t) {\n    return new (t || ImageService)();\n  };\n\n  ImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ImageService,\n    factory: ImageService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ImageService;\n})();","map":null,"metadata":{},"sourceType":"module"}